{"version":3,"sources":["logo.svg","CONST.js","Toolbar.jsx","Main.jsx","DataReducer.jsx","Api.js","Cell.jsx","Realization.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["AppRoute","ReducerActionRouter","Request","Toolbar","className","to","Main","DataContext","React","createContext","initialState","active","result","status","dataReducer","state","action","type","response","payload","Object","assign","data","a","url","fetch","json","method","headers","body","JSON","stringify","answer","console","log","Cell","props","words","cell","Realization","useContext","dispatch","useState","cells","setcells","info","setinfo","formRef","useRef","siteRef","unicwords","keys","length","useEffect","ref","htmlFor","id","name","required","onClick","evt","preventDefault","userRequest","current","value","getMeUniqueWordFromThisSite","then","recUser","map","key","index","App","useReducer","Provider","src","logo","alt","href","target","rel","path","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ffb43bc2.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","const Active = {\r\n    REALIZATION: \"REALIZATION\",\r\n    TECHTASK : `TECHTASK`,\r\n    TESTCASE: `TESTCASE`,\r\n} \r\n\r\nconst AppRoute = {\r\n    ROOT: `/`,\r\n    REALIZATION: `/realization`,\r\n    TECHTASK : `/task`,\r\n    TESTCASE: `/case`,\r\n};\r\n\r\nconst ReducerActionRouter = {\r\n    GETUNICWORDS : `GETUNICWORDS`,\r\n    SAVEINDB: `SAVEINDB`, \r\n \r\n}\r\n\r\nconst Request = {\r\n    GETWORDS : '/api/get',\r\n    SAVEWORD: '/api/save', \r\n}\r\n\r\nexport {\r\n    ReducerActionRouter,\r\n    AppRoute,\r\n    Active,\r\n    Request\r\n};","import { AppRoute } from \"./CONST.js\"\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction Toolbar( ) {\r\n\r\n    return (\r\n\r\n        <div className=\"toolbar\">\r\n\r\n            <Link className=\"toolbar-link\" to={AppRoute.REALIZATION}>\r\n                <h2>- Реализация </h2>\r\n            </Link> \r\n     \r\n \r\n        </div>\r\n\r\n\r\n    );\r\n}\r\n\r\nexport default Toolbar;","import React from 'react';\r\nimport Toolbar from \"./Toolbar.jsx\"\r\n\r\n\r\nfunction Main() {\r\n \r\n    return (\r\n        <div className=\"main\">\r\n            <Toolbar\r\n        \r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Main;\r\n","import React from \"react\";\r\nimport { ReducerActionRouter, Active } from \"./CONST.js\"\r\n\r\nconst DataContext = React.createContext(\"words\");\r\nconst initialState = {\r\n    active: Active.REALIZATION,\r\n    result: [],\r\n    status: \"\"\r\n};\r\n\r\n\r\nconst dataReducer = (state, action) => {\r\n    // eslint-disable-next-line default-case\r\n    switch (action.type) {\r\n        case ReducerActionRouter.GETUNICWORDS:\r\n            const response = action.payload;\r\n     \r\n             return Object.assign({}, state, {\r\n                result: response,\r\n                status: \"words\"\r\n            })\r\n\r\n        // Сохранили в ДБ и сбросили\r\n        case ReducerActionRouter.SAVEINDB:\r\n\r\n            return Object.assign({}, state, {\r\n                result: [],\r\n                status: \"\"\r\n            })\r\n    }\r\n}\r\n\r\nexport {\r\n    dataReducer,\r\n    initialState,\r\n    DataContext\r\n};","import {\r\n    Request\r\n} from \"./CONST.js\"\r\n\r\n//  TODO сделать Енумы на `/api/get` и другие\r\nasync function getMeUniqueWordFromThisSite(data) {\r\n    //  const url =  `${Request.GETWORDS}?url=${(new URLSearchParams(data)).toString()}`\r\n    const url = `${Request.GETWORDS}?url=${data}`\r\n\r\n    const response = await fetch(url);\r\n    return await response.json();\r\n}\r\n\r\nasync function recUser(data) {\r\n    const response = await fetch(Request.SAVEWORD, {\r\n        method: \"POST\",\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(data)\r\n    })\r\n const answer =   response;\r\n console.log(answer)\r\n    // return await response.json();\r\n    return true;\r\n\r\n}\r\n\r\n\r\n\r\nexport {\r\n    getMeUniqueWordFromThisSite,\r\n    recUser,\r\n}","\r\nfunction Cell(props) {\r\n    const {words,cell } = props;\r\n     return (\r\n        <li className=\"cell\">\r\n            <div className=\"cell_id\">{words} </div>\r\n            <div className=\"cell_name\">{cell} </div>\r\n        </li>\r\n    )\r\n};\r\n\r\nexport default Cell;","import React, { useState, useEffect, useRef, useContext } from 'react';\r\nimport { DataContext } from \"./DataReducer\"\r\n\r\nimport { recUser, getMeUniqueWordFromThisSite } from \"./Api.js\"\r\nimport Cell from \"./Cell.jsx\"\r\nimport './Realization.css';\r\nimport { ReducerActionRouter } from \"./CONST.js\"\r\n\r\nconst Realization = () => {\r\n    const { state, dispatch } = useContext(DataContext);\r\n\r\n    let [cells, setcells] = useState([]);\r\n    let [info, setinfo] = useState(\"Realization\");\r\n    let formRef = useRef(null);\r\n    let siteRef = useRef(null);\r\n\r\n    let unicwords = Object.keys(cells).length\r\n    useEffect(() => {\r\n        setcells(state.result)\r\n    }, [state.result]);\r\n\r\n    const sendUrlForParsing = (evt) => {\r\n        evt.preventDefault();\r\n        const userRequest = siteRef.current.value;\r\n        setinfo(userRequest)\r\n        getMeUniqueWordFromThisSite(userRequest).then(\r\n            (data) => {\r\n                dispatch({\r\n                    type: ReducerActionRouter.GETUNICWORDS,\r\n                    payload: data,\r\n\r\n                })\r\n            }\r\n        )\r\n    }\r\n\r\n    const saveWordInDB = (evt) => {\r\n        evt.preventDefault();\r\n        console.log(\"saveWordInDB \");\r\n        recUser(cells);\r\n        dispatch({\r\n            type: ReducerActionRouter.SAVEINDB,\r\n        });\r\n        setinfo(\"You can new request.\");\r\n    }\r\n    const _handleReset = () => {\r\n        formRef = null\r\n        setinfo(\"Realization\")\r\n        setcells({})\r\n    }\r\n\r\n    return (\r\n        <div className=\"realization\">\r\n            <form className=\"realization-form\" ref={formRef}>\r\n\r\n                <fieldset className=\"realization-form__element\">\r\n                    <label className=\"realization-form__label\" htmlFor=\"users\">Адрес сайта: </label>\r\n                    <input id=\"users\" name=\"users\" type=\"text\" required ref={siteRef} />\r\n                </fieldset>\r\n\r\n                <fieldset className=\"realization-form__element realization-form__element--submit\">\r\n                    <button className=\"ad-form__submit\" type=\"submit\" onClick={sendUrlForParsing}>Отправить</button>\r\n                    или <button className=\"ad-form__reset\" type=\"reset\" onClick={_handleReset}>Очистить форму</button>\r\n                </fieldset>\r\n            </form>\r\n            {unicwords>0  ?\r\n                <div>\r\n                    <p>Количество уникальных слов - {unicwords}</p>\r\n                    <button className=\"ad-form__clear\" type=\"submit\" onClick={saveWordInDB}>Сохранить в БД</button>\r\n                </div>\r\n                : \"\"}\r\n            <h1>{info}</h1>\r\n            <ul className=\"cell_list\">\r\n                {\r\n                    Object.keys(cells).map(\r\n                        (key, index) => {\r\n                            return (\r\n                                <Cell\r\n                                    words={key}\r\n                                    cell={cells[key]}\r\n                                    key={key}\r\n                                />\r\n                            );\r\n                        })\r\n                }\r\n            </ul>\r\n\r\n\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n\r\nexport default Realization;","import logo from './logo.svg';\nimport './App.css';\nimport Main from \"./Main.jsx\"\nimport { AppRoute } from \"./CONST.js\"\nimport Realization from \"./Realization.jsx\"\n\nimport {\n  BrowserRouter,\n  Routes,\n  Route\n} from \"react-router-dom\";\n import React, { useReducer } from 'react';\n\nimport { DataContext, initialState, dataReducer } from \"./DataReducer\"\n\nfunction App() {\n  const [state, dispatch] = useReducer(dataReducer, initialState);\n\n  return (\n    <DataContext.Provider value={{ dispatch, state }}>\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <a\n          className=\"App-link\"\n          href=\"/\"\n        >\n          <h1>\n            Поиск и подсчет уникальных слов на сайте.\n          </h1>\n        </a>\n        <a\n          className=\"App-link\"\n          href=\"https://github.com/Egor18032019/SimbirSoftTestJavaAndReact\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Репозиторий\n        </a>\n      </header>\n      <main>\n        <BrowserRouter>\n          <Routes>\n            <Route path={AppRoute.ROOT} element={<Main />} />\n            <Route path={AppRoute.REALIZATION} element={<Realization />} />\n           </Routes>\n        </BrowserRouter>\n      </main>\n    </div >\n    </DataContext.Provider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}